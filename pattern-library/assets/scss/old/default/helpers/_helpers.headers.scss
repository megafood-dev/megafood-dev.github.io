// ============================================================================
// Headings
// ============================================================================

$h1_font-family: $font-family-secondary !default;
$h1_font-size: px-to-rem(35px) !default;
$h1--md-up_font-size: px-to-rem(45px) !default;
$h1--lg-up_font-size: px-to-rem(45px) !default;
$h1_font-weight: 600 !default;
$h1_line-height: 1.2 !default;
$h1_text-transform: none !default;

$h2_font-family: $font-family-secondary !default;
$h2_font-size: px-to-rem(27px) !default;
$h2--md-up_font-size: px-to-rem(32px) !default;
$h2--lg-up_font-size: px-to-rem(32px) !default;
$h2_font-weight: 500 !default;
$h2_line-height: 1.2 !default;
$h2_text-transform: none !default;

$h3_font-family: $font-family-secondary !default;
$h3_font-size: px-to-rem(21px) !default;
$h3--md-up_font-size: px-to-rem(24px) !default;
$h3--lg-up_font-size: px-to-rem(24px) !default;
$h3_font-weight: 500 !default;
$h3_line-height: 1.2 !default;
$h3_text-transform: none !default;

/// Mixin for all our basic heading styles as to allow for double standard heading heirarchy, e.g.
/// semantically we need an H2, but we want it to be sized like an H1.
///
/// @group Styling
///
/// @author PixelMEDIA (Jono Herrington)
///
/// @param {string} $type - Insert the type of header style (h1 - h3)
/// @param {list} $properties - Custom property values for header
///
/// @example scss - Usage
///   .usage {
///      @include pxl-heading(h1);
///   }
///
/// @example css - CSS Output
///   .usage {
///      font-family: sans-serif;
///      font-size: 21px;
///      font-weight: 400;
///      line-height: 1.2;
///      text-transform: uppercase;
///   }
///
///   @media (min-width: 400px) {
///      .usage {
///         font-size: 24px;
///      }
///   }
///
///   @media (min-width: 781px) {
///      .usage {
///         font-size: 27px;
///      }
///   }

@mixin pxl-header($type: h1, $properties: ()) {

    @if $properties != () {

        $properties: map-merge((
        font-family: $h1_font-family,
        font-size: $h1_font-size,
        font-size--md-up: $h1--md-up_font-size,
        font-size--lg-up: $h1--lg-up_font-size,
        font-weight: $h1_font-weight,
        line-height: $h1_line-height,
        text-transform: $h1_text-transform
        ), $properties);

        font-family: map_get($properties, font-family);
        font-size: map_get($properties, font-size);
        font-weight: map_get($properties, font-weight);
        line-height: map_get($properties, line-height);
        text-transform: map_get($properties, text-transform);

        @media ($breakpoint-ml) {
            font-size: map_get($properties, font-size--md-up);
        }

        @media ($breakpoint-lg) {
            font-size: map_get($properties, font-size--lg-up);
        }

    } @else {

        @if $type == h1 {

            $properties: (
            font-family: $h1_font-family,
            font-size: $h1_font-size,
            font-size--md-up: $h1--md-up_font-size,
            font-size--lg-up: $h1--lg-up_font-size,
            font-weight: $h1_font-weight,
            line-height: $h1_line-height,
            text-transform: $h1_text-transform
            )

        } @else if $type == h2 {

            $properties: (
            font-family: $h2_font-family,
            font-size: $h2_font-size,
            font-size--md-up: $h2--md-up_font-size,
            font-size--lg-up: $h2--lg-up_font-size,
            font-weight: $h2_font-weight,
            line-height: $h2_line-height,
            text-transform: $h2_text-transform
            )

        } @else if $type == h3 {

            $properties: (
            font-family: $h3_font-family,
            font-size: $h3_font-size,
            font-size--md-up: $h3--md-up_font-size,
            font-size--lg-up: $h3--lg-up_font-size,
            font-weight: $h3_font-weight,
            line-height: $h3_line-height,
            text-transform: $h3_text-transform
            )

        } @else {
            @error 'Invalid heading type'
        }

        @if $properties {
            font-family: map_get($properties, font-family);
            font-size: map_get($properties, font-size);
            font-weight: map_get($properties, font-weight);
            line-height: map_get($properties, line-height);
            text-transform: map_get($properties, text-transform);

            @media ($breakpoint-ml) {
                font-size: map_get($properties, font-size--md-up);
            }

            @media ($breakpoint-lg) {
                font-size: map_get($properties, font-size--lg-up);
            }
        }
    }
}
